# 0717_class_attribute
# インスタンスアトリビュートとクラスアトリビュート
#  class method同様に、インスタンスの持ち物か、クラスの持ち物かの違い。

# インスタンスアトリビュート
#  インスタンス依存のデータ。
#  コンストラクタ(メソッド)内で追加されたアトリビュートがこれに当たる。
# 定義例）
#  def __init__(self):
#      self.id = 0
#      self.name = ''
# 上記２つはインスタンスアトリビュート。

# クラスアトリビュート
#  クラスメソッド同様、クラスの持ち物なので、
#  クラス名.アトリビュートにて呼び出せる。
#  クラス定義直下にて変数を用意すると、これに当たる。
#  アクセスカウンターや共有資源のやつ（デッドロックとかの）などに使われる

class User:
    # クラスアトリビュート
    id = 0
    name = None

print(User.id)
print(User.name)

print()

class User:
    # クラスアトリビュート
    id = 0
    name = None

    def a(self):
        User.id += 1

user1 = User()
user2 = User()

user1.a() # 0 + 1 = 1
user2.a() # 1 + 1 = 2
print(user1.id)
print(user2.id)
print(User.id)
# ↑ 全部同じ



# ポイント！
#  クラスアトリビュートは、
#  共有領域となる！

# この、共有領域目的以外でクラスアトリビュートを利用しないこと！
# 同様に、クラスメソッドも「インスタンス不要で呼び出せるから便利。」ではない。
# 基本的なオブジェクト指向のお作法としては、「インスタンスありき」です。
# そうはいっても、インスタンスをまたいだデータ領域や、そのデータ領域を操作するメソッドって
# あると便利な時は便利だよねって形でクラスメンバが用意されています。

# まとめ。
# まずはインスタンスありきで制作！
# クラスメンバは、そういったこともできる。。。といった感じで頭の片隅に。